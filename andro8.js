// andro_v16_rezka.js
(function() {
  'use strict';

  // === –£–ú–ù–´–ï –ë–ê–õ–ê–ù–°–ï–†–´ –° REZKA.AG ===
  const BALANCERS = {
    servers: [
      { 
        id: 'rezka', 
        title: 'Rezka.ag', 
        url: 'https://rezka.ag', 
        active: true,
        weight: 2, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        health: 'unknown',
        lastCheck: 0,
        searchPath: '/search/?do=search&subaction=search&q=',
        parser: 'rezka'
      },
      { 
        id: 'cine', 
        title: 'cine.to', 
        url: 'https://cine.to', 
        active: true,
        weight: 1,
        health: 'unknown',
        lastCheck: 0,
        searchPath: '/?s=',
        parser: 'generic'
      },
      { 
        id: 'kinoger', 
        title: 'kinoger', 
        url: 'https://kinoger.com', 
        active: true,
        weight: 1,
        health: 'unknown',
        lastCheck: 0,
        searchPath: '/?s=',
        parser: 'generic'
      }
    ],
    currentIndex: 0,
    checkInterval: 30000,
    timeout: 10000
  };

  const PROXY = 'https://smotret24.ru/proxy?url=';

  // === –ü–ê–†–°–ï–† –î–õ–Ø REZKA.AG ===
  const RezkaParser = {
    // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ Rezka
    parseSearchResults: function(html, baseUrl) {
      try {
        const results = [];
        const doc = new DOMParser().parseFromString(html, 'text/html');
        
        // –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ Rezka
        const items = doc.querySelectorAll('.b-content__inline_item, .b-content__inline-item, .search-results__item');
        
        items.forEach(item => {
          try {
            const linkEl = item.querySelector('a');
            const titleEl = item.querySelector('.b-content__inline_item-link a, .search-results__item-link');
            const posterEl = item.querySelector('img');
            const infoEl = item.querySelector('.b-content__inline_item-list, .search-results__item-info');
            
            if (linkEl && titleEl) {
              const title = titleEl.textContent.trim();
              let link = linkEl.getAttribute('href');
              const poster = posterEl ? (posterEl.getAttribute('src') || posterEl.getAttribute('data-src')) : '';
              const info = infoEl ? infoEl.textContent.trim() : '';
              
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
              if (link && !link.startsWith('http')) {
                link = new URL(link, baseUrl).href;
              }
              
              if (title && link) {
                results.push({
                  title: title,
                  link: link,
                  poster: poster,
                  info: info,
                  type: this.detectContentType(title, info)
                });
              }
            }
          } catch(e) {
            console.warn('Error parsing Rezka item:', e);
          }
        });
        
        // Fallback: –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å—Å—ã–ª–∫–∞–º
        if (results.length === 0) {
          const allLinks = doc.querySelectorAll('a');
          allLinks.forEach(link => {
            const href = link.getAttribute('href');
            const text = link.textContent.trim();
            if (href && text && href.includes('/films/') || href.includes('/series/')) {
              if (text.length > 2 && !results.find(r => r.link === href)) {
                results.push({
                  title: text,
                  link: href.startsWith('http') ? href : new URL(href, baseUrl).href,
                  poster: '',
                  info: '',
                  type: 'unknown'
                });
              }
            }
          });
        }
        
        return results;
      } catch (error) {
        console.error('Rezka parseSearchResults error:', error);
        return [];
      }
    },

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–∏–¥–µ–æ Rezka
    parseVideoPage: function(html, pageUrl) {
      try {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        
        // –ò—â–µ–º iframe —Å –≤–∏–¥–µ–æ
        const iframe = doc.querySelector('#video-player iframe, .b-post__video iframe, iframe[src*="voidboost"]');
        if (iframe) {
          const src = iframe.getAttribute('src');
          if (src && src.includes('voidboost')) {
            return this.extractFromVoidboost(src);
          }
        }
        
        // –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã–º–∏
        const scripts = doc.querySelectorAll('script');
        for (let script of scripts) {
          const text = script.textContent;
          if (text.includes('voidboost') || text.includes('videojs')) {
            // –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            const match = text.match(/\{[\s\S]*?"url":"[^"]*voidboost[^"]*"[\s\S]*?\}/);
            if (match) {
              try {
                const data = JSON.parse(match[0]);
                if (data.url) return data.url;
              } catch(e) {}
            }
            
            // –ò—â–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
            const urlMatch = text.match(/(https?:\\?\/\\?\/[^"']*voidboost[^"']*)/);
            if (urlMatch) {
              return urlMatch[1].replace(/\\\//g, '/');
            }
          }
        }
        
        return null;
      } catch (error) {
        console.error('Rezka parseVideoPage error:', error);
        return null;
      }
    },

    extractFromVoidboost: function(voidboostUrl) {
      // –î–ª—è voidboost –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      return voidboostUrl;
    },

    detectContentType: function(title, info) {
      if (info && (info.includes('—Å–µ—Ä–∏–∞–ª') || info.includes('—Å–µ–∑–æ–Ω'))) return 'series';
      if (title && (title.includes('—Å–µ–∑–æ–Ω') || title.includes('—Å–µ—Ä–∏—è'))) return 'series';
      return 'movie';
    }
  };

  // === –ö–õ–ê–°–° –£–ú–ù–û–ì–û –ë–ê–õ–ê–ù–°–ï–†–ê ===
  class SmartBalancer {
    constructor() {
      this.servers = BALANCERS.servers;
      this.healthyServers = [];
      this.isChecking = false;
      this.init();
    }

    init() {
      console.log('üöÄ Smart Balancer with Rezka initialized');
      this.startHealthMonitoring();
      this.createStatusPanel();
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–æ–≤
    startHealthMonitoring() {
      if (this.isChecking) return;
      this.isChecking = true;

      const checkServer = async (server) => {
        try {
          const testUrl = server.url + '/';
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), BALANCERS.timeout);

          const response = await fetch(PROXY + encodeURIComponent(testUrl), {
            method: 'HEAD',
            signal: controller.signal
          });

          clearTimeout(timeoutId);

          if (response.status === 200 || response.status === 404) {
            server.health = 'healthy';
            server.lastCheck = Date.now();
            if (!this.healthyServers.find(s => s.id === server.id)) {
              this.healthyServers.push(server);
            }
            console.log(`‚úÖ ${server.title} is healthy`);
          } else {
            this.markServerUnhealthy(server);
          }
        } catch (error) {
          console.warn(`‚ùå ${server.title} health check failed:`, error.message);
          this.markServerUnhealthy(server);
        }
      };

      const promises = this.servers
        .filter(server => server.active)
        .map(server => checkServer(server));

      Promise.allSettled(promises).then(() => {
        this.isChecking = false;
        this.updateStatusPanel();
        setTimeout(() => this.startHealthMonitoring(), BALANCERS.checkInterval);
      });
    }

    markServerUnhealthy(server) {
      server.health = 'unhealthy';
      server.lastCheck = Date.now();
      const index = this.healthyServers.findIndex(s => s.id === server.id);
      if (index > -1) {
        this.healthyServers.splice(index, 1);
      }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (—Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤)
    getBestServer() {
      if (this.healthyServers.length > 0) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
        const sortedServers = [...this.healthyServers].sort((a, b) => b.weight - a.weight);
        return sortedServers[0];
      }
      
      // Fallback –Ω–∞ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
      const activeServer = this.servers.find(s => s.active);
      return activeServer || this.servers[0];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ ID
    getServerById(id) {
      return this.servers.find(s => s.id === id);
    }

    // –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –±–∞–ª–∞–Ω—Å–µ—Ä–æ–≤
    createStatusPanel() {
      if (document.getElementById('balancer-status-panel')) return;

      const panel = document.createElement('div');
      panel.id = 'balancer-status-panel';
      panel.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        background: rgba(0,0,0,0.95);
        color: white;
        padding: 12px;
        border-radius: 8px;
        font-family: Arial, sans-serif;
        font-size: 11px;
        z-index: 9998;
        border: 1px solid #333;
        max-width: 300px;
        max-height: 250px;
        overflow-y: auto;
        display: none;
      `;

      panel.innerHTML = `
        <div style="margin-bottom: 8px; font-weight: bold; color: #FF6B35;">
          üöÄ Androzon Balancers
        </div>
        <div id="balancer-servers-list"></div>
        <div style="margin-top: 8px; font-size: 10px; color: #bbb;">
          Healthy: <span id="healthy-count">0</span>/${this.servers.length}
          <br>Press Ctrl+B to toggle
        </div>
        <button id="refresh-balancers" style="margin-top: 6px; padding: 4px 8px; background: #FF6B35; border: none; border-radius: 4px; color: white; cursor: pointer; font-size: 10px;">
          üîÑ Refresh Status
        </button>
      `;

      document.body.appendChild(panel);
      this.setupPanelEvents();
    }

    setupPanelEvents() {
      document.getElementById('refresh-balancers').addEventListener('click', () => {
        this.startHealthMonitoring();
      });

      // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ Ctrl+B
      document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.key === 'b') {
          const panel = document.getElementById('balancer-status-panel');
          panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
        }
      });
    }

    updateStatusPanel() {
      const listEl = document.getElementById('balancer-servers-list');
      const countEl = document.getElementById('healthy-count');

      if (listEl && countEl) {
        countEl.textContent = this.healthyServers.length;

        const serversHtml = this.servers.map(server => {
          const status = server.health === 'healthy' ? 'üü¢' : 
                        server.health === 'unhealthy' ? 'üî¥' : '‚ö™';
          const weight = server.weight > 1 ? ` (priority: ${server.weight})` : '';
          return `<div style="margin: 3px 0; color: ${server.health === 'healthy' ? '#4CAF50' : '#ff4444'}">
            ${status} <strong>${server.title}</strong>${weight}
          </div>`;
        }).join('');

        listEl.innerHTML = serversHtml;
      }
    }
  }

  // === –°–ï–¢–ï–í–û–ô –°–õ–û–ô ===
  function createNetwork() {
    var Net = (typeof Lampa !== 'undefined' && (Lampa.Reguest || Lampa.Request)) ? (Lampa.Reguest || Lampa.Request) : null;
    if (Net) {
      try { return new Net(); }
      catch (e) { console.warn('createNetwork: new Net failed', e); }
    }
    return {
      native: function(url, success, error) {
        try {
          fetch(url, { credentials: 'include' })
            .then(r => r.text())
            .then(t => success && success(t))
            .catch(e => error && error(e));
        } catch (e) { error && error(e); }
      },
      clear: function() {}
    };
  }

  function account(url) {
    try {
      if (!url || typeof url !== 'string') return url;
      var uid = (typeof Lampa !== 'undefined' && Lampa.Storage) ? Lampa.Storage.get('lampac_unic_id', '') : '';
      if (uid && url.indexOf('uid=') === -1) {
        url += (url.indexOf('?') >= 0 ? '&' : '?') + 'uid=' + encodeURIComponent(uid);
      }
      return url;
    } catch (e) { return url; }
  }

  var network = createNetwork();
  var balancer = new SmartBalancer();

  // === –£–õ–£–ß–®–ï–ù–ù–´–ô –ò–ó–í–õ–ï–ö–ê–¢–ï–õ–¨ –í–ò–î–ï–û ===
  function extractVideoUrl(html, base) {
    try {
      if (!html) return null;

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
      const directMatches = html.match(/(https?:\/\/[^\s"'<>]+?\.(?:m3u8|mp4|mkv|avi)[^\s"'<>]*)/gi) || [];
      for (let match of directMatches) {
        if (match.includes('m3u8') || match.includes('mp4')) {
          return match;
        }
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Iframe src (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è Rezka)
      const iframeMatch = html.match(/<iframe[^>]+src=["']([^"']+)["']/i);
      if (iframeMatch && iframeMatch[1]) {
        let src = iframeMatch[1];
        if (src.startsWith('//')) src = 'https:' + src;
        if (!src.startsWith('http') && base) {
          try { src = new URL(src, base).href; } catch(e) {}
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ voidboost –æ—Ç Rezka
        if (src.includes('voidboost')) {
          return this.processVoidboostLink(src);
        }
        
        return src;
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: Rezka —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (html.includes('voidboost')) {
        const voidboostMatch = html.match(/(https?:\\?\/\\?\/[^"']*voidboost[^"']*)/);
        if (voidboostMatch) {
          return voidboostMatch[1].replace(/\\\//g, '/');
        }
      }

      return null;
    } catch (err) {
      console.error('extractVideoUrl error', err);
      return null;
    }
  }

  function processVoidboostLink(voidboostUrl) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ voidboost (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
    return voidboostUrl;
  }

  // === –ö–û–ú–ü–û–ù–ï–ù–¢ ANDROZON –° –ü–û–î–î–ï–†–ñ–ö–û–ô REZKA ===
  function component(object) {
    var movie = object.movie || {};
    var scroll = new Lampa.Scroll({ mask: true, over: true });
    var last;

    this.create = function() { return this.render(); };
    this.render = function() { return scroll.render(); };

    this.start = function() {
      this.initialize();
    };

    this.initialize = function() {
      var that = this;
      scroll.body().addClass('torrent-list');

      // Header
      var header = $('<div style="display:flex;padding:16px;gap:14px;align-items:center;"></div>');
      var posterUrl = movie.poster_path ? Lampa.TMDB.image('t/p/w300' + movie.poster_path) : (movie.img || '');
      var poster = $('<div style="width:130px;height:190px;background:#111;border-radius:8px;overflow:hidden;"></div>');
      if (posterUrl) {
        var img = $('<img style="width:100%;height:100%;object-fit:cover;">').attr('src', posterUrl);
        poster.append(img);
      } else {
        poster.append($('<div style="width:100%;height:100%;display:flex;align-items:center;justify-content:center;color:#777">No poster</div>'));
      }
      
      var info = $('<div style="flex:1;"></div>');
      info.append('<div style="font-size:20px;font-weight:700;color:#fff;margin-bottom:6px;">' + (movie.title || movie.name || '') + '</div>');
      info.append('<div style="color:#bbb;font-size:13px;">' + ((movie.overview && movie.overview.slice(0,200)) || '') + '</div>');

      header.append(poster).append(info);
      scroll.append(header);

      // Balancers list
      scroll.append($('<div style="padding:12px 16px;color:#ddd;font-weight:600;">–£–º–Ω—ã–µ –±–∞–ª–∞–Ω—Å–µ—Ä—ã (Rezka.ag –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)</div>'));
      
      BALANCERS.servers.forEach((balancerItem) => {
        var el = $('<div class="selector" style="padding:14px;margin:8px 16px;border-radius:10px;background:rgba(255,255,255,0.02);display:flex;justify-content:space-between;align-items:center;cursor:pointer;"></div>');
        
        const status = balancerItem.health === 'healthy' ? 'üü¢' : 
                     balancerItem.health === 'unhealthy' ? 'üî¥' : '‚ö™';
        const priority = balancerItem.weight > 1 ? ' üî•' : '';
        
        el.append(`<div><div style="font-weight:700;color:#fff;">${status} ${balancerItem.title}${priority}</div><div style="font-size:12px;color:#bbb;">${balancerItem.health || 'checking...'}</div></div>`);
        el.append('<div style="color:#fff;font-size:12px;">' + (balancerItem.id === 'rezka' ? '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' : '') + '</div>');
        
        el.on('hover:enter', function(){
          if (!balancerItem.active) { 
            Lampa.Noty.show('–ë–∞–ª–∞–Ω—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'); 
            return; 
          }
          that.searchOnBalancer(balancerItem);
        });
        
        el.on('hover:focus', function(e){ last = e.target; });
        scroll.append(el);
      });

      // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–µ—Ä–∞
      setTimeout(() => {
        const bestServer = balancer.getBestServer();
        if (bestServer) {
          Lampa.Noty.show(`–ê–≤—Ç–æ–≤—ã–±–æ—Ä: ${bestServer.title} ${bestServer.weight > 1 ? '(–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)' : ''}`);
        }
      }, 1500);

      Lampa.Controller.enable('content');
    };

    this.searchOnBalancer = function(balancerItem) {
      var that = this;
      
      Lampa.Search.start({
        title: '–ü–æ–∏—Å–∫ –Ω–∞ ' + balancerItem.title,
        onSearch: function(q) {
          if (!q) return;
          
          const searchUrl = balancerItem.url + balancerItem.searchPath + encodeURIComponent(q);
          const fetchUrl = PROXY + encodeURIComponent(searchUrl);
          
          Lampa.Noty.show(`üîç –ò—â–µ–º "${q}" –Ω–∞ ${balancerItem.title}...`);
          
          network.native(account(fetchUrl), function(html) {
            try {
              if (!html || html.length < 100) {
                Lampa.Noty.show('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                return;
              }

              let results = [];
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Rezka
              if (balancerItem.parser === 'rezka') {
                results = RezkaParser.parseSearchResults(html, balancerItem.url);
              } else {
                // –û–±—â–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤
                results = that.parseGenericSearchResults(html, balancerItem.url);
              }

              if (results.length === 0) {
                Lampa.Noty.show('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
              }

              that.showResultsPanel(balancerItem, results, q);
              
            } catch (error) {
              console.error('Search results parsing error:', error);
              Lampa.Noty.show('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            }
          }, function(err) {
            console.error('Search network error:', err);
            Lampa.Noty.show('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä
            const fallbackServer = balancer.servers.find(s => s.id !== balancerItem.id && s.active);
            if (fallbackServer) {
              Lampa.Noty.show(`–ü—Ä–æ–±—É—é ${fallbackServer.title}...`);
              that.searchOnBalancer(fallbackServer);
            }
          });
        }
      });
    };

    this.parseGenericSearchResults = function(html, baseUrl) {
      const results = [];
      try {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        
        // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∏–Ω–æ—Å–∞–π—Ç–æ–≤
        const selectors = [
          '.movie-item', '.film-item', '.search-result', '.item',
          'article', '.b-content__inline_item', '.movie'
        ];
        
        let items = [];
        selectors.forEach(selector => {
          const found = doc.querySelectorAll(selector);
          if (found.length > 0) {
            items = found;
          }
        });

        items.forEach(item => {
          try {
            const linkEl = item.querySelector('a');
            const titleEl = item.querySelector('h2, h3, .title, .name');
            const posterEl = item.querySelector('img');
            
            if (linkEl) {
              const title = titleEl ? titleEl.textContent.trim() : linkEl.textContent.trim();
              let link = linkEl.getAttribute('href');
              const poster = posterEl ? (posterEl.getAttribute('src') || posterEl.getAttribute('data-src')) : '';
              
              if (link && !link.startsWith('http')) {
                link = new URL(link, baseUrl).href;
              }
              
              if (title && link) {
                results.push({
                  title: title,
                  link: link,
                  poster: poster,
                  info: '',
                  type: 'unknown'
                });
              }
            }
          } catch(e) {
            console.warn('Error parsing search item:', e);
          }
        });

      } catch(error) {
        console.error('Generic parser error:', error);
      }
      
      return results;
    };

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (showResultsPanel, showMoviePage, playFromMoviePage –∏ —Ç.–¥.)
    // –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Rezka

    this.showResultsPanel = function(balancerItem, items, query) {
      var that = this;
      scroll.clear();
      
      var header = $('<div style="padding:12px 16px;color:#fff;font-weight:700;">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: "' + query + '"</div>');
      scroll.append(header);

      items.forEach(function(it){
        var card = $('<div class="selector" style="display:flex;gap:12px;padding:12px;margin:8px 16px;border-radius:8px;background:rgba(255,255,255,0.02);align-items:center;cursor:pointer;"></div>');
        var img = $('<div style="width:80px;height:55px;background:#222;border-radius:6px;overflow:hidden;"></div>');
        if (it.poster) {
          img.append('<img src="'+it.poster+'" style="width:100%;height:100%;object-fit:cover;">');
        }
        var info = $('<div style="flex:1;"></div>');
        info.append('<div style="font-weight:700;color:#fff;">'+it.title+'</div>');
        if (it.info) {
          info.append('<div style="font-size:12px;color:#bbb;">'+it.info+'</div>');
        }
        info.append('<div style="font-size:11px;color:#888;margin-top:4px;">'+(it.link.length>60? it.link.slice(0,60)+'...':it.link)+'</div>');
        card.append(img).append(info);

        card.on('hover:enter', function() {
          that.showMoviePage(balancerItem, it);
        });
        scroll.append(card);
      });

      // back
      var back = $('<div class="selector" style="padding:12px;margin:16px;border-radius:8px;background:rgba(255,255,255,0.02);text-align:center;cursor:pointer;">‚Üê –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å–µ—Ä–∞–º</div>');
      back.on('hover:enter', function(){ that.initialize(); });
      scroll.append(back);
    };

    this.showMoviePage = function(balancerItem, movieItem) {
      var that = this;
      scroll.clear();
      
      var header = $('<div style="padding:16px;"></div>');
      header.append('<div style="font-weight:700;color:#fff;font-size:18px;margin-bottom:8px;">'+movieItem.title+'</div>');
      if (movieItem.poster) {
        header.append('<div style="margin-bottom:12px;"><img src="'+movieItem.poster+'" style="width:120px;height:auto;border-radius:6px;"/></div>');
      }
      if (movieItem.info) {
        header.append('<div style="color:#bbb;font-size:13px;margin-bottom:12px;">'+movieItem.info+'</div>');
      }
      scroll.append(header);

      var watch = $('<div class="selector" style="padding:14px;margin:8px 16px;border-radius:8px;background:#FF6B35;color:#fff;text-align:center;font-weight:700;cursor:pointer;">üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ '+balancerItem.title+'</div>');
      watch.on('hover:enter', function(){
        that.playFromMoviePage(balancerItem, movieItem);
      });
      scroll.append(watch);

      var back = $('<div class="selector" style="padding:12px;margin:16px;border-radius:8px;background:rgba(255,255,255,0.02);text-align:center;cursor:pointer;">‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º</div>');
      back.on('hover:enter', function(){ that.initialize(); });
      scroll.append(back);
    };

    this.playFromMoviePage = function(balancerItem, movieItem) {
      var that = this;
      var fetchUrl = PROXY + encodeURIComponent(movieItem.link);
      Lampa.Noty.show('–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–µ–µ—Ä–∞...');

      network.native(account(fetchUrl), function(html) {
        try {
          if (!html || html.length < 100) {
            Lampa.Noty.show('–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            return;
          }

          let videoUrl = null;

          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Rezka
          if (balancerItem.parser === 'rezka') {
            videoUrl = RezkaParser.parseVideoPage(html, movieItem.link);
          }

          // –û–±—â–∏–π –ø–∞—Ä—Å–µ—Ä –µ—Å–ª–∏ Rezka –Ω–µ –Ω–∞—à–µ–ª
          if (!videoUrl) {
            videoUrl = extractVideoUrl(html, movieItem.link);
          }

          if (videoUrl) {
            Lampa.Noty.show('–í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—é –ø–ª–µ–µ—Ä üé¨');
            Lampa.Player.play({ 
              url: videoUrl, 
              title: movieItem.title, 
              quality: { 'Auto': videoUrl } 
            });
          } else {
            Lampa.Noty.show('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ —Å—Å—ã–ª–∫—É');
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
          }
        } catch (e) {
          console.error('playFromMoviePage parse error', e);
          Lampa.Noty.show('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–µ—Ä–∞');
        }
      }, function(err) {
        console.error('network error load player', err);
        Lampa.Noty.show('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–µ—Ä–∞');
      });
    };

    this.pause = function(){};
    this.stop = function(){};
    this.destroy = function() {
      try { network.clear(); } catch(e) {}
      try { scroll.destroy(); } catch(e) {}
    };
  }

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
  function init() {
    console.log('üéØ Androzon with Rezka.ag v16 initialized');

    try { 
      Lampa.Component.add('androzon', component); 
    } catch(e){ 
      console.error('Component.add error', e); 
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    Lampa.Listener.follow('full', function(e) {
      if (e.type !== 'complite') return;
      try {
        var render = e.object.activity.render();
        var movie = e.data.movie;
        
        render.find('.androzon-button').remove();

        var btn = $('<div class="full-start__button selector androzon-button" style="background: linear-gradient(45deg,#FF6B35,#FF8E53); margin:6px; border-radius:8px;"><div style="padding:10px 16px;display:flex;align-items:center;justify-content:center;"><span style="margin-right:8px;">üî•</span><span style="font-weight:700;color:#fff;">Androzon Pro</span></div></div>');
        
        btn.on('hover:enter', function() {
          Lampa.Activity.push({
            url: '',
            title: 'Androzon - ' + (movie.title || movie.name),
            component: 'androzon',
            movie: movie,
            page: 1
          });
        });

        var torrentBtn = render.find('.view--torrent');
        var playBtn = render.find('.button--play');
        var buttonsContainer = render.find('.full-start__buttons');

        if (torrentBtn.length) torrentBtn.after(btn);
        else if (playBtn.length) playBtn.after(btn);
        else if (buttonsContainer.length) buttonsContainer.prepend(btn);
        else {
          var cardActions = render.find('.full-actions, .full-start');
          if (cardActions.length) cardActions.prepend(btn);
          else render.append(btn);
        }
      } catch(err) {
        console.error('Add button error', err);
      }
    });
  }

  // –ó–∞–ø—É—Å–∫
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
